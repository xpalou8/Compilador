
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package CompiladoresMuerte2.Sintactic;

import java_cup.runtime.*;
import java.util.ArrayList;
import CompiladoresMuerte2.Sintactic.Nodo;
import CompiladoresMuerte2.Sintactic.Tipo;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\010\004\000\002\010" +
    "\005\000\002\011\004\000\002\011\003\000\002\011\003" +
    "\000\002\014\005\000\002\025\006\000\002\025\005\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\015\003\000\002\015\005\000\002\026\006\000\002\026" +
    "\005\000\002\012\005\000\002\012\006\000\002\012\005" +
    "\000\002\012\006\000\002\012\005\000\002\012\006\000" +
    "\002\024\003\000\002\024\005\000\002\013\006\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\054" +
    "\003\000\002\054\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\030\010\000\002\017\003\000\002\017\002\000\002" +
    "\020\003\000\002\020\004\000\002\031\003\000\002\031" +
    "\003\000\002\031\004\000\002\031\003\000\002\031\003" +
    "\000\002\032\006\000\002\016\005\000\002\016\003\000" +
    "\002\016\002\000\002\040\007\000\002\040\007\000\002" +
    "\040\007\000\002\041\011\000\002\021\007\000\002\042" +
    "\004\000\002\042\002\000\002\043\003\000\002\043\002" +
    "\000\002\044\003\000\002\044\002\000\002\052\005\000" +
    "\002\052\006\000\002\052\004\000\002\052\005\000\002" +
    "\052\004\000\002\052\005\000\002\053\003\000\002\053" +
    "\003\000\002\045\011\000\002\046\010\000\002\047\005" +
    "\000\002\050\006\000\002\050\002\000\002\051\011\000" +
    "\002\022\004\000\002\022\003\000\002\036\010\000\002" +
    "\036\005\000\002\034\005\000\002\034\007\000\002\034" +
    "\003\000\002\035\003\000\002\035\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\003\000" +
    "\002\033\005\000\002\033\005\000\002\007\003\000\002" +
    "\007\003\000\002\055\003\000\002\055\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\057\004\000" +
    "\002\057\003\000\002\064\003\000\002\064\003\000\002" +
    "\060\014\000\002\060\012\000\002\061\005\000\002\061" +
    "\005\000\002\062\005\000\002\062\005\000\002\023\003" +
    "\000\002\023\005\000\002\023\002\000\002\063\004\000" +
    "\002\002\004\000\002\003\005\000\002\003\005\000\002" +
    "\003\002\000\002\004\004\000\002\005\005\000\002\005" +
    "\005\000\002\005\002\000\002\006\005\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\004\000" +
    "\002\006\004\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\010\023\011\024\007\025\005\001\002\000" +
    "\012\002\uff9d\023\uff9d\024\uff9d\025\uff9d\001\002\000\010" +
    "\004\025\005\046\006\037\001\002\000\012\002\uff9c\023" +
    "\uff9c\024\uff9c\025\uff9c\001\002\000\004\012\362\001\002" +
    "\000\012\002\361\023\011\024\007\025\005\001\002\000" +
    "\004\052\013\001\002\000\012\002\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\001\002\000\004\053\014\001\002\000\004\054" +
    "\015\001\002\000\032\004\025\005\046\006\037\007\031" +
    "\012\033\013\035\015\041\021\020\022\043\026\036\030" +
    "\030\055\uffdc\001\002\000\042\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\012\uffd6\013\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\026\uffd6\027\uffd6\030\uffd6\055\uffd6" +
    "\001\002\000\042\004\uffd8\005\uffd8\006\uffd8\007\uffd8\012" +
    "\uffd8\013\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\026\uffd8\027\uffd8\030\uffd8\055\uffd8\001\002\000" +
    "\004\052\325\001\002\000\042\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\012\uffe0\013\uffe0\015\uffe0\016\uffe0\017\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\026\uffe0\027\uffe0\030\uffe0\055\uffe0" +
    "\001\002\000\042\004\uffd5\005\uffd5\006\uffd5\007\uffd5\012" +
    "\uffd5\013\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\026\uffd5\027\uffd5\030\uffd5\055\uffd5\001\002\000" +
    "\042\004\uffdf\005\uffdf\006\uffdf\007\uffdf\012\uffdf\013\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\055\uffdf\001\002\000\042\004\uffe2" +
    "\005\uffe2\006\uffe2\007\uffe2\012\uffe2\013\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\055\uffe2\001\002\000\006\012\ufff7\056\ufff7\001" +
    "\002\000\006\012\312\056\305\001\002\000\042\004\uffd9" +
    "\005\uffd9\006\uffd9\007\uffd9\012\uffd9\013\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\055\uffd9\001\002\000\004\052\272\001\002\000" +
    "\010\004\025\005\046\006\037\001\002\000\004\055\267" +
    "\001\002\000\014\035\060\050\054\051\057\052\150\056" +
    "\056\001\002\000\042\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\012\uffdb\013\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\026\uffdb\027\uffdb\030\uffdb\055\uffdb\001\002" +
    "\000\004\052\253\001\002\000\020\010\071\011\076\012" +
    "\100\034\101\052\063\063\070\064\073\001\002\000\006" +
    "\012\ufff6\056\ufff6\001\002\000\042\004\025\005\046\006" +
    "\037\007\031\012\033\013\035\015\041\016\uffdd\017\uffdd" +
    "\020\uffdd\021\020\022\043\026\036\027\uffdd\030\030\055" +
    "\uffdd\001\002\000\004\052\225\001\002\000\044\004\uffeb" +
    "\005\uffeb\006\uffeb\007\uffeb\012\uffeb\013\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\055\uffeb\060\uffeb\001\002\000\004\052\217\001" +
    "\002\000\042\004\uffe1\005\uffe1\006\uffe1\007\uffe1\012\uffe1" +
    "\013\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\055\uffe1\001\002\000\044" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\012\uffe3\013\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\026\uffe3" +
    "\027\uffe3\030\uffe3\055\uffe3\060\051\001\002\000\006\012" +
    "\ufff8\056\ufff8\001\002\000\004\061\050\001\002\000\042" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\012\uffd7\013\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\026\uffd7" +
    "\027\uffd7\030\uffd7\055\uffd7\001\002\000\004\012\053\001" +
    "\002\000\044\004\uffea\005\uffea\006\uffea\007\uffea\012\uffea" +
    "\013\uffea\015\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\026\uffea\027\uffea\030\uffea\055\uffea\060\uffea\001\002" +
    "\000\012\035\060\050\054\051\057\056\056\001\002\000" +
    "\004\061\216\001\002\000\012\035\212\050\210\051\211" +
    "\056\134\001\002\000\004\010\206\001\002\000\004\061" +
    "\205\001\002\000\024\010\071\011\076\012\100\031\064" +
    "\032\077\034\101\052\063\063\070\064\073\001\002\000" +
    "\004\052\202\001\002\000\012\040\uffab\041\uffab\053\uffab" +
    "\061\uffab\001\002\000\020\010\071\011\076\012\100\034" +
    "\101\052\063\063\070\064\073\001\002\000\004\052\uffe5" +
    "\001\002\000\012\040\uffb1\041\uffb1\053\uffb1\061\uffb1\001" +
    "\002\000\034\033\170\034\167\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\053\uff8d\060" +
    "\uff8d\061\uff8d\001\002\000\012\040\uffb0\041\uffb0\053\uffb0" +
    "\061\uffb0\001\002\000\012\040\uffa8\041\uffa8\053\uffa8\061" +
    "\uffa8\001\002\000\042\033\uff87\034\uff87\036\uff87\037\uff87" +
    "\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\045\uff87\046" +
    "\uff87\047\uff87\053\uff87\060\uff87\061\uff87\062\uff87\001\002" +
    "\000\044\004\ufff1\005\ufff1\006\ufff1\007\ufff1\012\ufff1\013" +
    "\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1" +
    "\026\ufff1\027\ufff1\030\ufff1\055\ufff1\060\ufff1\001\002\000" +
    "\012\040\uffa7\041\uffa7\053\uffa7\061\uffa7\001\002\000\040" +
    "\033\uff89\034\uff89\036\160\037\161\040\uff89\041\uff89\042" +
    "\uff89\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\053\uff89" +
    "\060\uff89\061\uff89\001\002\000\020\042\125\043\123\044" +
    "\121\045\122\046\127\047\126\061\156\001\002\000\042" +
    "\033\uff86\034\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042" +
    "\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\053\uff86" +
    "\060\uff86\061\uff86\062\uff86\001\002\000\004\052\uffe4\001" +
    "\002\000\036\033\uff85\034\uff85\036\uff85\037\uff85\042\uff85" +
    "\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\052\150\053" +
    "\uff85\056\056\061\uff85\001\002\000\004\012\146\001\002" +
    "\000\010\040\111\041\114\061\112\001\002\000\010\044" +
    "\104\045\105\061\106\001\002\000\006\063\070\064\073" +
    "\001\002\000\006\063\070\064\073\001\002\000\044\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\012\uffe6\013\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\055\uffe6\060\uffe6\001\002\000\012\040\uffa9" +
    "\041\uffa9\053\uffa9\061\uffa9\001\002\000\012\040\uffaa\041" +
    "\uffaa\053\uffaa\061\uffaa\001\002\000\020\010\uffa6\011\uffa6" +
    "\012\uffa6\034\uffa6\052\uffa6\063\uffa6\064\uffa6\001\002\000" +
    "\044\004\uffe7\005\uffe7\006\uffe7\007\uffe7\012\uffe7\013\uffe7" +
    "\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\026" +
    "\uffe7\027\uffe7\030\uffe7\055\uffe7\060\uffe7\001\002\000\020" +
    "\010\071\011\076\012\100\034\101\052\115\063\070\064" +
    "\073\001\002\000\020\010\uffa5\011\uffa5\012\uffa5\034\uffa5" +
    "\052\uffa5\063\uffa5\064\uffa5\001\002\000\020\010\071\011" +
    "\076\012\100\034\101\052\130\063\070\064\073\001\002" +
    "\000\012\040\uffb3\041\uffb3\053\uffb3\061\uffb3\001\002\000" +
    "\006\044\104\045\105\001\002\000\016\042\125\043\123" +
    "\044\121\045\122\046\127\047\126\001\002\000\020\010" +
    "\uffa4\011\uffa4\012\uffa4\034\uffa4\052\uffa4\063\070\064\073" +
    "\001\002\000\020\010\uffa3\011\uffa3\012\uffa3\034\uffa3\052" +
    "\uffa3\063\070\064\073\001\002\000\014\010\uffa1\011\uffa1" +
    "\012\uffa1\034\uffa1\052\uffa1\001\002\000\014\010\071\011" +
    "\076\012\132\034\101\052\130\001\002\000\014\010\uffa2" +
    "\011\uffa2\012\uffa2\034\uffa2\052\uffa2\001\002\000\014\010" +
    "\uff9f\011\uff9f\012\uff9f\034\uff9f\052\uff9f\001\002\000\014" +
    "\010\uffa0\011\uffa0\012\uffa0\034\uffa0\052\uffa0\001\002\000" +
    "\014\010\071\011\076\012\132\034\101\052\130\001\002" +
    "\000\012\040\uffae\041\uffae\053\uffae\061\uffae\001\002\000" +
    "\044\033\uff85\034\uff85\036\uff85\037\uff85\040\uff85\041\uff85" +
    "\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\053" +
    "\uff85\056\056\060\uff85\061\uff85\062\uff85\001\002\000\044" +
    "\033\uff84\034\uff84\036\uff84\037\uff84\040\uff84\041\uff84\042" +
    "\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047\uff84\053\uff84" +
    "\056\134\060\uff84\061\uff84\062\uff84\001\002\000\004\010" +
    "\135\001\002\000\004\057\136\001\002\000\052\033\ufff3" +
    "\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3" +
    "\051\ufff3\053\ufff3\056\ufff3\060\ufff3\061\ufff3\062\ufff3\001" +
    "\002\000\004\053\140\001\002\000\042\033\uff88\034\uff88" +
    "\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044" +
    "\uff88\045\uff88\046\uff88\047\uff88\053\uff88\060\uff88\061\uff88" +
    "\062\uff88\001\002\000\012\040\uffac\041\uffac\053\uffac\061" +
    "\uffac\001\002\000\012\040\uffad\041\uffad\053\uffad\061\uffad" +
    "\001\002\000\004\053\145\001\002\000\020\042\125\043" +
    "\123\044\121\045\122\046\127\047\126\053\140\001\002" +
    "\000\012\040\uffaf\041\uffaf\053\uffaf\061\uffaf\001\002\000" +
    "\044\033\uff83\034\uff83\036\uff83\037\uff83\040\uff83\041\uff83" +
    "\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83\053" +
    "\uff83\056\056\060\uff83\061\uff83\062\uff83\001\002\000\044" +
    "\033\uff82\034\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042" +
    "\uff82\043\uff82\044\uff82\045\uff82\046\uff82\047\uff82\053\uff82" +
    "\056\134\060\uff82\061\uff82\062\uff82\001\002\000\020\010" +
    "\071\011\076\012\132\034\101\052\130\053\uffd1\060\uffd1" +
    "\001\002\000\006\053\154\060\153\001\002\000\006\053" +
    "\uffd2\060\uffd2\001\002\000\014\010\071\011\076\012\132" +
    "\034\101\052\130\001\002\000\012\044\uffd4\045\uffd4\053" +
    "\uffd4\061\uffd4\001\002\000\006\053\uffd3\060\uffd3\001\002" +
    "\000\044\004\uffe8\005\uffe8\006\uffe8\007\uffe8\012\uffe8\013" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\055\uffe8\060\uffe8\001\002\000" +
    "\034\033\uff8c\034\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c" +
    "\044\uff8c\045\uff8c\046\uff8c\047\uff8c\053\uff8c\060\uff8c\061" +
    "\uff8c\001\002\000\014\010\071\011\076\012\132\034\101" +
    "\052\130\001\002\000\014\010\071\011\076\012\132\034" +
    "\101\052\130\001\002\000\040\033\uff89\034\uff89\036\160" +
    "\037\161\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045" +
    "\uff89\046\uff89\047\uff89\053\uff89\060\uff89\061\uff89\001\002" +
    "\000\034\033\uff8a\034\uff8a\040\uff8a\041\uff8a\042\uff8a\043" +
    "\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\053\uff8a\060\uff8a" +
    "\061\uff8a\001\002\000\040\033\uff89\034\uff89\036\160\037" +
    "\161\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89" +
    "\046\uff89\047\uff89\053\uff89\060\uff89\061\uff89\001\002\000" +
    "\034\033\uff8b\034\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b" +
    "\044\uff8b\045\uff8b\046\uff8b\047\uff8b\053\uff8b\060\uff8b\061" +
    "\uff8b\001\002\000\030\040\uff90\041\uff90\042\uff90\043\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\053\uff90\060\uff90\061" +
    "\uff90\001\002\000\014\010\071\011\076\012\132\034\101" +
    "\052\130\001\002\000\014\010\071\011\076\012\132\034" +
    "\101\052\130\001\002\000\034\033\170\034\167\040\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047" +
    "\uff8d\053\uff8d\060\uff8d\061\uff8d\001\002\000\030\040\uff8f" +
    "\041\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\053\uff8f\060\uff8f\061\uff8f\001\002\000\034\033\170" +
    "\034\167\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045" +
    "\uff8d\046\uff8d\047\uff8d\053\uff8d\060\uff8d\061\uff8d\001\002" +
    "\000\030\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\047\uff8e\053\uff8e\060\uff8e\061\uff8e\001\002" +
    "\000\006\040\111\041\114\001\002\000\010\040\uffb0\041" +
    "\uffb0\053\145\001\002\000\020\010\071\011\076\012\100" +
    "\034\101\052\115\063\070\064\073\001\002\000\010\040" +
    "\uffb3\041\uffb3\053\201\001\002\000\012\040\uffb2\041\uffb2" +
    "\053\uffb2\061\uffb2\001\002\000\004\053\203\001\002\000" +
    "\004\061\204\001\002\000\044\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\012\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\026\uffe9\027\uffe9\030\uffe9\055\uffe9" +
    "\060\uffe9\001\002\000\044\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\012\uffed\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed" +
    "\021\uffed\022\uffed\026\uffed\027\uffed\030\uffed\055\uffed\060" +
    "\uffed\001\002\000\004\057\207\001\002\000\052\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042" +
    "\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\053\ufff2\056\ufff2\060\ufff2\061\ufff2\062\ufff2\001" +
    "\002\000\004\061\215\001\002\000\004\061\214\001\002" +
    "\000\024\010\071\011\076\012\100\031\064\032\077\034" +
    "\101\052\063\063\070\064\073\001\002\000\044\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\012\ufff0\013\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\055\ufff0\060\ufff0\001\002\000\044\004\uffec\005" +
    "\uffec\006\uffec\007\uffec\012\uffec\013\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\021\uffec\022\uffec\026\uffec\027\uffec\030" +
    "\uffec\055\uffec\060\uffec\001\002\000\044\004\uffee\005\uffee" +
    "\006\uffee\007\uffee\012\uffee\013\uffee\015\uffee\016\uffee\017" +
    "\uffee\020\uffee\021\uffee\022\uffee\026\uffee\027\uffee\030\uffee" +
    "\055\uffee\060\uffee\001\002\000\044\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\012\uffef\013\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\022\uffef\026\uffef\027\uffef\030\uffef\055" +
    "\uffef\060\uffef\001\002\000\020\010\071\011\076\012\100" +
    "\034\101\052\063\063\070\064\073\001\002\000\010\040" +
    "\111\041\114\053\221\001\002\000\004\054\222\001\002" +
    "\000\032\004\025\005\046\006\037\007\031\012\033\013" +
    "\035\015\041\021\020\022\043\026\036\030\030\055\uffdc" +
    "\001\002\000\004\055\224\001\002\000\042\004\uffbd\005" +
    "\uffbd\006\uffbd\007\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\055\uffbd\001\002\000\004\012\226\001\002\000\004" +
    "\053\227\001\002\000\004\054\230\001\002\000\006\016" +
    "\233\017\231\001\002\000\004\062\244\001\002\000\010" +
    "\016\uffb6\017\uffb6\055\uffb6\001\002\000\014\010\071\011" +
    "\076\012\132\034\101\052\130\001\002\000\010\016\233" +
    "\017\231\055\235\001\002\000\042\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\012\uffb8\013\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\026\uffb8\027\uffb8\030\uffb8\055" +
    "\uffb8\001\002\000\010\016\uffb7\017\uffb7\055\uffb7\001\002" +
    "\000\004\062\240\001\002\000\032\004\025\005\046\006" +
    "\037\007\031\012\033\013\035\015\041\020\uffdc\021\020" +
    "\022\043\026\036\030\030\001\002\000\004\020\242\001" +
    "\002\000\004\061\243\001\002\000\010\016\uffb5\017\uffb5" +
    "\055\uffb5\001\002\000\036\004\025\005\046\006\037\007" +
    "\031\012\033\013\035\015\041\016\uffdc\017\uffdc\021\020" +
    "\022\043\026\036\030\030\055\uffdc\001\002\000\010\016" +
    "\uffb4\017\uffb4\055\uffb4\001\002\000\042\004\uffda\005\uffda" +
    "\006\uffda\007\uffda\012\uffda\013\uffda\015\uffda\016\uffda\017" +
    "\uffda\020\uffda\021\uffda\022\uffda\026\uffda\027\uffda\030\uffda" +
    "\055\uffda\001\002\000\010\040\111\041\114\061\252\001" +
    "\002\000\020\042\125\043\123\044\121\045\122\046\127" +
    "\047\126\061\251\001\002\000\042\004\uff97\005\uff97\006" +
    "\uff97\007\uff97\012\uff97\013\uff97\015\uff97\016\uff97\017\uff97" +
    "\020\uff97\021\uff97\022\uff97\026\uff97\027\uff97\030\uff97\055" +
    "\uff97\001\002\000\042\004\uff98\005\uff98\006\uff98\007\uff98" +
    "\012\uff98\013\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021" +
    "\uff98\022\uff98\026\uff98\027\uff98\030\uff98\055\uff98\001\002" +
    "\000\020\010\071\011\076\012\100\034\101\052\063\063" +
    "\070\064\073\001\002\000\010\040\111\041\114\053\255" +
    "\001\002\000\004\054\256\001\002\000\032\004\025\005" +
    "\046\006\037\007\031\012\033\013\035\015\041\021\020" +
    "\022\043\026\036\030\030\055\uffdc\001\002\000\044\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\012\uffb9\013\uffb9\014\260" +
    "\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\055\uffb9\001\002\000\004\054\262" +
    "\001\002\000\042\004\uffbc\005\uffbc\006\uffbc\007\uffbc\012" +
    "\uffbc\013\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\026\uffbc\027\uffbc\030\uffbc\055\uffbc\001\002\000" +
    "\032\004\025\005\046\006\037\007\031\012\033\013\035" +
    "\015\041\021\020\022\043\026\036\030\030\055\uffdc\001" +
    "\002\000\004\055\264\001\002\000\042\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\012\uffba\013\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\026\uffba\027\uffba\030\uffba" +
    "\055\uffba\001\002\000\004\055\266\001\002\000\044\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\055\uffbb\001\002\000\012\002\uffde" +
    "\023\uffde\024\uffde\025\uffde\001\002\000\004\012\053\001" +
    "\002\000\042\004\uffff\005\uffff\006\uffff\007\uffff\012\uffff" +
    "\013\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff\022" +
    "\uffff\026\uffff\027\uffff\030\uffff\055\uffff\001\002\000\020" +
    "\010\071\011\076\012\100\034\101\052\063\063\070\064" +
    "\073\001\002\000\010\040\111\041\114\053\302\001\002" +
    "\000\010\044\104\045\105\053\300\001\002\000\020\042" +
    "\125\043\123\044\121\045\122\046\127\047\126\053\276" +
    "\001\002\000\004\061\277\001\002\000\042\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\012\uffd0\013\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\055\uffd0\001\002\000\004\061\301\001\002\000\042" +
    "\004\uffce\005\uffce\006\uffce\007\uffce\012\uffce\013\uffce\015" +
    "\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce\026\uffce" +
    "\027\uffce\030\uffce\055\uffce\001\002\000\004\061\303\001" +
    "\002\000\042\004\uffcf\005\uffcf\006\uffcf\007\uffcf\012\uffcf" +
    "\013\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\055\uffcf\001\002\000\042" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\012\ufffd\013\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\022\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\055\ufffd\001\002\000\004\010\323\001" +
    "\002\000\042\004\ufffc\005\ufffc\006\ufffc\007\ufffc\012\ufffc" +
    "\013\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\055\ufffc\001\002\000\042" +
    "\004\000\005\000\006\000\007\000\012\000\013\000\015" +
    "\000\016\000\017\000\020\000\021\000\022\000\026\000" +
    "\027\000\030\000\055\000\001\002\000\006\012\317\056" +
    "\316\001\002\000\006\060\314\061\313\001\002\000\016" +
    "\035\060\050\054\051\057\056\056\060\ufff5\061\ufff5\001" +
    "\002\000\042\004\ufffe\005\ufffe\006\ufffe\007\ufffe\012\ufffe" +
    "\013\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe\022" +
    "\ufffe\026\ufffe\027\ufffe\030\ufffe\055\ufffe\001\002\000\004" +
    "\012\315\001\002\000\006\060\ufff4\061\ufff4\001\002\000" +
    "\004\010\321\001\002\000\004\061\320\001\002\000\042" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\012\ufffb\013\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\022\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\055\ufffb\001\002\000\004\057\322\001" +
    "\002\000\006\012\ufffa\056\ufffa\001\002\000\004\057\324" +
    "\001\002\000\006\012\ufff9\056\ufff9\001\002\000\012\004" +
    "\025\005\046\006\037\061\uffca\001\002\000\004\012\337" +
    "\001\002\000\004\053\353\001\002\000\004\061\331\001" +
    "\002\000\022\010\071\011\076\012\100\034\101\052\063" +
    "\061\uffc8\063\070\064\073\001\002\000\010\040\111\041" +
    "\114\061\uffc9\001\002\000\004\061\334\001\002\000\006" +
    "\012\337\053\uffc6\001\002\000\004\053\uffcc\001\002\000" +
    "\004\053\uffc7\001\002\000\012\035\343\050\340\051\342" +
    "\056\056\001\002\000\006\053\uffc3\061\uffc3\001\002\000" +
    "\012\035\351\050\347\051\350\056\134\001\002\000\006" +
    "\053\uffc1\061\uffc1\001\002\000\020\010\071\011\076\012" +
    "\100\034\101\052\130\063\070\064\073\001\002\000\006" +
    "\053\uffbe\061\uffbe\001\002\000\006\053\uffc5\061\uffc5\001" +
    "\002\000\022\042\125\043\123\044\121\045\122\046\127" +
    "\047\126\053\uffbf\061\uffbf\001\002\000\006\053\uffc2\061" +
    "\uffc2\001\002\000\006\053\uffc0\061\uffc0\001\002\000\020" +
    "\010\071\011\076\012\100\034\101\052\130\063\070\064" +
    "\073\001\002\000\006\053\uffc4\061\uffc4\001\002\000\004" +
    "\054\354\001\002\000\032\004\025\005\046\006\037\007" +
    "\031\012\033\013\035\015\041\021\020\022\043\026\036" +
    "\030\030\055\uffdc\001\002\000\004\055\356\001\002\000" +
    "\042\004\uffcd\005\uffcd\006\uffcd\007\uffcd\012\uffcd\013\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\055\uffcd\001\002\000\004\061\uffcb" +
    "\001\002\000\012\002\uff9e\023\uff9e\024\uff9e\025\uff9e\001" +
    "\002\000\004\002\001\001\002\000\004\052\363\001\002" +
    "\000\014\004\025\005\046\006\037\053\uff92\060\uff92\001" +
    "\002\000\004\012\375\001\002\000\006\053\uff94\060\uff94" +
    "\001\002\000\006\053\370\060\367\001\002\000\010\004" +
    "\025\005\046\006\037\001\002\000\004\054\371\001\002" +
    "\000\032\004\025\005\046\006\037\007\031\012\033\013" +
    "\035\015\041\021\020\022\043\026\036\030\030\055\uffdc" +
    "\001\002\000\004\055\373\001\002\000\012\002\uff99\023" +
    "\uff99\024\uff99\025\uff99\001\002\000\006\053\uff93\060\uff93" +
    "\001\002\000\006\053\uff91\060\uff91\001\002\000\004\012" +
    "\377\001\002\000\004\052\u0100\001\002\000\014\004\025" +
    "\005\046\006\037\053\uff92\060\uff92\001\002\000\006\053" +
    "\u0102\060\367\001\002\000\004\054\u0103\001\002\000\032" +
    "\004\025\005\046\006\037\007\031\012\033\013\035\015" +
    "\041\021\020\022\043\026\036\027\uffdc\030\030\001\002" +
    "\000\004\027\u0105\001\002\000\020\010\071\011\076\012" +
    "\100\034\101\052\063\063\070\064\073\001\002\000\004" +
    "\055\u0107\001\002\000\012\002\uff9a\023\uff9a\024\uff9a\025" +
    "\uff9a\001\002\000\010\040\111\041\114\061\u010b\001\002" +
    "\000\020\042\125\043\123\044\121\045\122\046\127\047" +
    "\126\061\u010a\001\002\000\004\055\uff95\001\002\000\004" +
    "\055\uff96\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\012\030\005\057\007\060\011\064\003\001" +
    "\001\000\002\001\001\000\004\037\375\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\030\005\060\011\064" +
    "\357\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\010\026\012\041\017" +
    "\031\020\037\024\044\027\016\031\033\032\046\037\025" +
    "\040\015\041\043\045\020\046\023\051\022\061\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\306\012\305" +
    "\014\303\015\310\025\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\267\001\001\000\002\001\001" +
    "\000\004\026\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\002\247\004\065\006\073\007\061\032\116" +
    "\033\066\034\246\035\064\001\001\000\002\001\001\000" +
    "\034\010\026\012\041\024\044\027\016\031\245\032\046" +
    "\037\025\040\015\041\043\045\020\046\023\051\022\061" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\051" +
    "\001\001\000\002\001\001\000\004\026\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\074\004\065\006\073\007\061\013" +
    "\071\032\102\033\066\034\101\035\064\054\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\143\004" +
    "\065\006\073\007\061\032\116\033\175\034\174\035\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\156\001\001\000\004\056\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\132\001\001\000\002\001" +
    "\001\000\004\055\112\001\001\000\002\001\001\000\004" +
    "\007\107\001\001\000\004\007\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\002\117\004\065\006\073\007" +
    "\061\032\116\033\066\035\115\001\001\000\002\001\001" +
    "\000\016\002\143\004\065\006\073\007\061\032\116\033" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\123\001\001\000\004\007\141\001\001\000\004\007" +
    "\140\001\001\000\002\001\001\000\010\002\130\004\065" +
    "\006\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\136\004\065\006\073\001\001" +
    "\000\002\001\001\000\004\026\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\123\001\001" +
    "\000\002\001\001\000\004\026\146\001\001\000\002\001" +
    "\001\000\012\002\151\004\065\006\073\016\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\154\004" +
    "\065\006\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\163\001" +
    "\001\000\004\006\161\001\001\000\004\005\162\001\001" +
    "\000\002\001\001\000\004\005\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\172\006\073\001\001" +
    "\000\006\004\170\006\073\001\001\000\004\003\171\001" +
    "\001\000\002\001\001\000\004\003\173\001\001\000\002" +
    "\001\001\000\004\055\176\001\001\000\002\001\001\000" +
    "\020\002\117\004\065\006\073\007\061\032\116\033\066" +
    "\035\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\002\074\004\065\006\073" +
    "\007\061\013\212\032\102\033\066\034\101\035\064\054" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\002\117\004\065\006" +
    "\073\007\061\032\116\033\066\034\217\035\064\001\001" +
    "\000\004\055\112\001\001\000\002\001\001\000\040\010" +
    "\026\012\041\017\222\020\037\024\044\027\016\031\033" +
    "\032\046\037\025\040\015\041\043\045\020\046\023\051" +
    "\022\061\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\233\036\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\236\001\001\000\004\036\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\010\026\012\041\017\240\020\037\024\044\027" +
    "\016\031\033\032\046\037\025\040\015\041\043\045\020" +
    "\046\023\051\022\061\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\010\026\012\041" +
    "\017\244\020\037\024\044\027\016\031\033\032\046\037" +
    "\025\040\015\041\043\045\020\046\023\051\022\061\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\112\001\001\000\004\056\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\117\004\065\006\073\007" +
    "\061\032\116\033\066\034\253\035\064\001\001\000\004" +
    "\055\112\001\001\000\004\047\256\001\001\000\040\010" +
    "\026\012\041\017\264\020\037\024\044\027\016\031\033" +
    "\032\046\037\025\040\015\041\043\045\020\046\023\051" +
    "\022\061\021\001\001\000\004\050\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\010\026\012\041\017" +
    "\262\020\037\024\044\027\016\031\033\032\046\037\025" +
    "\040\015\041\043\045\020\046\023\051\022\061\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\270\001" +
    "\001\000\002\001\001\000\022\002\274\004\065\006\073" +
    "\007\061\032\273\033\066\034\272\035\064\001\001\000" +
    "\004\055\112\001\001\000\002\001\001\000\004\056\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\326\037\325\042\327" +
    "\001\001\000\004\052\356\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\117\004\065\006\073\007\061" +
    "\032\116\033\066\034\331\035\064\043\332\001\001\000" +
    "\004\055\112\001\001\000\002\001\001\000\006\044\334" +
    "\052\335\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\002\345\004\065\006\073\007" +
    "\061\032\116\033\343\053\344\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\002\345\004\065\006\073" +
    "\007\061\032\116\033\343\053\351\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\010\026\012\041\017\354" +
    "\020\037\024\044\027\016\031\033\032\046\037\025\040" +
    "\015\041\043\045\020\046\023\051\022\061\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\023\365\037\363\063\364\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\363\063\373" +
    "\001\001\000\002\001\001\000\040\010\026\012\041\017" +
    "\371\020\037\024\044\027\016\031\033\032\046\037\025" +
    "\040\015\041\043\045\020\046\023\051\022\061\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\023\u0100\037\363\063\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\010\026\012\041\017\u0103\020" +
    "\037\024\044\027\016\031\033\032\046\037\025\040\015" +
    "\041\043\045\020\046\023\051\022\061\021\001\001\000" +
    "\004\062\u0105\001\001\000\022\002\u0108\004\065\006\073" +
    "\007\061\032\116\033\066\034\u0107\035\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\055\112\001\001" +
    "\000\004\056\123\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private int contador = 1;
    private ArrayList<Nodo> EmptyNodes = new ArrayList();
    private Nodo initnodo = new Nodo(Tipo.INICIAL, null, 0, EmptyNodes);
    
    /***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
    ***/
    //metodo que devuelve el nodo inicial del programa
    public Nodo getInitNodo(){
        return initnodo;
    }

    /**
     * Variable utilitzada para almacenar el análisis léxico
     **/
    private String errores = "";
    private int numErrores = 0;
    /**
     * Indicador de si s'ha detectat un error semàntic (true) o no (false);
     * Si una regla semàntica detecta un error, el notifica i posa el valor
     * a true, això limita el funcionament fins acabar de processar l'entrada,
     * moment en què es torna a posar a false.
     **/

    /**********************
     * Gestión de errores *
     **********************/

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Error sintàctic catastròfic \n", cur_token);
        done_parsing();        
    }
    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("Error de sintaxis en: "+cur_token.toString()+"\n", cur_token);
    }
    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")")
                   .append("\n");
            }
        }
        msg.append(": ").append(message);
        errores += msg;
        numErrores++;
    }
    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }

    public String get_Errores(){
        return errores;
    }
    
    public int get_errores(){
        return numErrores;
    }
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programs EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Decl ::= Tipo Decl1 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                ArrayList<Nodo> LNodos = new ArrayList<>();
                                LNodos.add(v);
                                LNodos.add(v1);
                                RESULT = new Nodo(Tipo.DECLARACION, null, contador++,v1left,v1right, LNodos);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decl ::= Const Tipo Asignacion 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    ArrayList<Nodo> LNodos = new ArrayList<>();
                                    LNodos.add(v);
                                    LNodos.add(v1);
                                    RESULT = new Nodo(Tipo.DECL_CONST, null, contador++,v1left,v1right, LNodos);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decl1 ::= List_ids P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                RESULT = new Nodo(Tipo.VARIABLE, null, contador++,vleft,vright, v);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl1 ::= Decl_Array 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                        RESULT = v;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decl1 ::= Asignacion 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = v;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Decl_Array ::= ArrayIds id P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                        RESULT = new Nodo(Tipo.ARRAY, v2.toString(), contador++,v2left,v2right, v);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decl_Array",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ArrayIds ::= ArrayIds Corchete_a Entero Corchete_c 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                            if(v == null){
                                                                v = new ArrayList<>();
                                                            }
                                                            Nodo naux = new Nodo(Tipo.INT, v1.toString(), contador++,v1left,v1right, EmptyNodes);
                                                            v.add(naux);
                                                            RESULT = v;
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayIds",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ArrayIds ::= Corchete_a Entero Corchete_c 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                if(RESULT == null){
                                                    RESULT = new ArrayList<>();
                                                }
                                                Nodo naux = new Nodo(Tipo.INT, v.toString(), contador++,vleft,vright, EmptyNodes);
                                                RESULT.add(naux);
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ArrayIds",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Tipo ::= String 
            {
              Nodo RESULT =null;
		
                RESULT = new Nodo(Tipo.TIPO, "String", contador++, EmptyNodes);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Tipo ::= Int 
            {
              Nodo RESULT =null;
		
                RESULT = new Nodo(Tipo.TIPO, "Int", contador++, EmptyNodes);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Tipo ::= Bool 
            {
              Nodo RESULT =null;
		
                RESULT = new Nodo(Tipo.TIPO, "Bool", contador++, EmptyNodes);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tipo",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // List_ids ::= id 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(RESULT == null){
                            RESULT = new ArrayList<>();
                        }
                        Nodo naux = new Nodo(Tipo.ID, (String)v, contador++,vleft,vright, EmptyNodes);
                        RESULT.add(naux);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("List_ids",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // List_ids ::= List_ids Coma id 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                if(v == null){
                                    v = new ArrayList<>();
                                }
                                Nodo naux = new Nodo(Tipo.ID, (String)v1, contador++,v1left,v1right, EmptyNodes);
                                v.add(naux);
                                RESULT = v;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("List_ids",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Acceso_array ::= Acceso_array Corchete_a Entero Corchete_c 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                    if(v == null) {
                                                                        v = new ArrayList<>();
                                                                    }
                                                                    Nodo naux = new Nodo(Tipo.INT, v1.toString(), contador++,v1left,v1right, EmptyNodes);
                                                                    v.add(naux);
                                                                    RESULT = v;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Acceso_array",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Acceso_array ::= Corchete_a Entero Corchete_c 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                    if(RESULT == null) {
                                                        RESULT = new ArrayList<>();
                                                    }
                                                    Nodo naux = new Nodo(Tipo.INT, v.toString(), contador++,vleft,vright, EmptyNodes);
                                                    RESULT.add(naux);
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Acceso_array",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Asignacion ::= id Igual Asig2 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    Nodo naux1 = new Nodo(Tipo.ID,(String)v, contador++,5,5, EmptyNodes);
                                    ArrayList<Nodo> LNodos = new ArrayList<>();
                                    LNodos.add(naux1);
                                    LNodos.add(v1);
                                    RESULT = new Nodo(Tipo.ASIGNACION, null, contador++,5,5, LNodos);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Asignacion ::= id Acceso_array Igual Asig2 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Nodo> v1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                Nodo naux1 = new Nodo(Tipo.ACCESOARRAY, (String)v, contador++,vleft,vright, v1);
                                                ArrayList<Nodo> LNodos = new ArrayList<>();
                                                LNodos.add(naux1);
                                                LNodos.add(v2);
                                                RESULT = new Nodo(Tipo.ASIGNACION, null, contador++,v1left,v1right, LNodos);
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Asignacion ::= id Increment P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                Nodo naux1 = new Nodo(Tipo.ID, (String)v, contador++,vleft,vright, EmptyNodes);
                                Nodo naux2 = new Nodo(Tipo.INT, "1", contador++, EmptyNodes);
                                ArrayList<Nodo> LNodos2 = new ArrayList<>();
                                LNodos2.add(naux1);
                                LNodos2.add(naux2);
                                Nodo naux3 = new Nodo(Tipo.SUM, null, contador++, LNodos2);
                                ArrayList<Nodo> LNodos = new ArrayList<>();
                                LNodos.add(naux1);
                                LNodos.add(naux3);
                                RESULT = new Nodo(Tipo.ASIGNACION, null, contador++,vleft,vright, LNodos);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Asignacion ::= id Acceso_array Increment P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Nodo> v1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                Nodo naux1 = new Nodo(Tipo.ACCESOARRAY, (String)v, contador++,v1left,v1right, v1);
                                                Nodo naux2 = new Nodo(Tipo.INT, "1", contador++, EmptyNodes);
                                                ArrayList<Nodo> LNodos2 = new ArrayList<>();
                                                LNodos2.add(naux1);
                                                LNodos2.add(naux2);
                                                Nodo naux3 = new Nodo(Tipo.SUM, null, contador++, LNodos2);
                                                ArrayList<Nodo> LNodos = new ArrayList<>();
                                                LNodos.add(naux1);
                                                LNodos.add(naux3);
                                                RESULT = new Nodo(Tipo.ASIGNACION, null, contador++,v1left,v1right, LNodos);
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Asignacion ::= id Decrement P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                Nodo naux1 = new Nodo(Tipo.ID, (String)v, contador++,vleft,vright, EmptyNodes);
                                Nodo naux2 = new Nodo(Tipo.INT, "1", contador++, EmptyNodes);
                                ArrayList<Nodo> LNodos2 = new ArrayList<>();
                                LNodos2.add(naux2);
                                LNodos2.add(naux1);
                                Nodo naux3 = new Nodo(Tipo.RES, null, contador++, LNodos2);
                                ArrayList<Nodo> LNodos = new ArrayList<>();
                                LNodos.add(naux1);
                                LNodos.add(naux3);
                                RESULT = new Nodo(Tipo.ASIGNACION, null, contador++,vleft,vright, LNodos);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Asignacion ::= id Acceso_array Decrement P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Nodo> v1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                Nodo naux1 = new Nodo(Tipo.ACCESOARRAY, (String)v, contador++,v1left,v1right, v1);
                                                Nodo naux2 = new Nodo(Tipo.INT, "1", contador++, EmptyNodes);
                                                ArrayList<Nodo> LNodos2 = new ArrayList<>();
                                                LNodos2.add(naux2);
                                                LNodos2.add(naux1);
                                                Nodo naux3 = new Nodo(Tipo.RES, null, contador++, LNodos2);
                                                ArrayList<Nodo> LNodos = new ArrayList<>();
                                                LNodos.add(naux1);
                                                LNodos.add(naux3);
                                                RESULT = new Nodo(Tipo.ASIGNACION, null, contador++,vleft,vright, LNodos);
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asignacion",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Lista_Asignacion ::= Asignacion 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        if(RESULT == null){
                                            RESULT = new ArrayList<>();
                                        }
                                        RESULT.add(v);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Asignacion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Lista_Asignacion ::= Lista_Asignacion Coma Asignacion 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                    if(v == null){
                                                        v = new ArrayList<>();
                                                    }
                                                    v.add(v1);
                                                    RESULT = v;
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Asignacion",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Asig2 ::= READ Parentesis_a Parentesis_c P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                                                    RESULT = v;
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asig2",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Asig2 ::= E P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = v;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asig2",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Asig2 ::= condiciones P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            RESULT = v;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asig2",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Asig2 ::= Llamada_sub P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                RESULT = v;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Asig2",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // READ ::= ReadInt 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo(Tipo.READ, "Int", contador++,vleft,vright, EmptyNodes); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // READ ::= ReadString 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo(Tipo.READ, "String", contador++,vleft,vright, EmptyNodes); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("READ",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Operacion ::= Lista_Asignacion 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                RESULT = new Nodo(Tipo.LISTAASIGNACION, null, contador++,vleft,vright, v);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Operacion ::= IF 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = v;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Operacion ::= FOR 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = v;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Operacion ::= WHILE 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Operacion ::= SWITCH 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Operacion",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Main_program ::= Main Parentesis_a Parentesis_c Llave_a Sentencias Llave_c 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                    if(v == null){
                                                                                        RESULT = new Nodo(Tipo.MAIN, null, contador++,vleft,vright, EmptyNodes);
                                                                                    }else{
                                                                                        RESULT = new Nodo(Tipo.MAIN, null, contador++,vleft,vright, v);
                                                                                    }
                                                                                    
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main_program",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Sentencias ::= Sentencias1 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencias",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Sentencias ::= 
            {
              ArrayList<Nodo> RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencias",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Sentencias1 ::= Sentencia 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                if(RESULT == null){
                                    RESULT = new ArrayList<>();
                                }
                                RESULT.add(v);
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencias1",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Sentencias1 ::= Sentencias1 Sentencia 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    if(v == null){
                                        v = new ArrayList<>();
                                    }
                                    v.add(v1);
                                    RESULT = v;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencias1",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Sentencia ::= Decl 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = v;
                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Sentencia ::= Operacion 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Sentencia ::= Llamada_sub P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                RESULT = v;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Sentencia ::= Salida_pantalla 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Sentencia ::= RETURN 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    RESULT = v;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Sentencia",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Llamada_sub ::= id Parentesis_a P_entrada Parentesis_c 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> v1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                RESULT = new Nodo(Tipo.LLAMADA_SUB, (String)v, contador++,vleft,vright, v1);
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Llamada_sub",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // P_entrada ::= P_entrada Coma E 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        if(v == null){
                                            v = new ArrayList<>();
                                        }
                                        v.add(v1);
                                        RESULT = v;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P_entrada",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // P_entrada ::= E 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        if(RESULT == null){
                            RESULT = new ArrayList<>();
                        }
                        RESULT.add(v);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P_entrada",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // P_entrada ::= 
            {
              ArrayList<Nodo> RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("P_entrada",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Salida_pantalla ::= Print Parentesis_a E Parentesis_c P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                    ArrayList<Nodo> LNodos = new ArrayList<>();
                                                                    LNodos.add(v);
                                                                    RESULT = new Nodo(Tipo.SALIDA, null, contador++,vleft,vright, LNodos);
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Salida_pantalla",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Salida_pantalla ::= Print Parentesis_a condiciones Parentesis_c P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                            ArrayList<Nodo> LNodos = new ArrayList<>();
                                                                            LNodos.add(v);
                                                                            RESULT = new Nodo(Tipo.SALIDA, null, contador++,vleft,vright, LNodos);
                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Salida_pantalla",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Salida_pantalla ::= Print Parentesis_a Llamada_sub Parentesis_c P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                            ArrayList<Nodo> LNodos = new ArrayList<>();
                                                                            LNodos.add(v);
                                                                            RESULT = new Nodo(Tipo.SALIDA, null, contador++,vleft,vright, LNodos);
                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Salida_pantalla",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR ::= For Parentesis_a For_Args Parentesis_c Llave_a Sentencias Llave_c 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> v1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                    ArrayList<Nodo> LNodos = new ArrayList<>();
                                                                                    Nodo naux1 = new Nodo(Tipo.FORARGS, null, contador++,vleft,vright, v);
                                                                                    LNodos.add(naux1);
                                                                                    Nodo naux = null;
                                                                                    if(v1 == null){
                                                                                        naux = new Nodo(Tipo.SENTENCIAS, null, contador++,v1left,v1right, EmptyNodes);
                                                                                    }else{
                                                                                        naux = new Nodo(Tipo.SENTENCIAS, null, contador++,v1left,v1right, v1);
                                                                                    }
                                                                                    LNodos.add(naux);
                                                                                    RESULT = new Nodo(Tipo.FOR, null, contador++,vleft,vright, LNodos);
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // For_Args ::= ASIG P_coma COND P_coma ASIG2 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                        RESULT = new ArrayList<>();
                                                        if(v != null) {
                                                            RESULT.add(v);
                                                        }
                                                        if(v1 != null) {
                                                            RESULT.add(v1);
                                                        }
                                                        if(v2 != null) {
                                                            RESULT.add(v2);
                                                        }
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("For_Args",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIG ::= Tipo AsigFor 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                    ArrayList<Nodo> LNodos = new ArrayList<>();
                                    LNodos.add(v);
                                    LNodos.add(v1);
                                    RESULT = new Nodo(Tipo.DECLARACION, null, contador++,v1left,v1right, LNodos);
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIG ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COND ::= condiciones 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COND ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COND",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIG2 ::= AsigFor 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG2",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIG2 ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIG2",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AsigFor ::= id Igual AsigFor2 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        Nodo naux1 = new Nodo(Tipo.ID, (String)v, contador++,vleft,vright, EmptyNodes);
                                        ArrayList<Nodo> LNodos = new ArrayList<>();
                                        LNodos.add(naux1);
                                        LNodos.add(v1);

                                        RESULT = new Nodo(Tipo.ASIGNACION, null, contador++,v1left,v1right, LNodos);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigFor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AsigFor ::= id Acceso_array Igual AsigFor2 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Nodo> v1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                    Nodo naux1 = new Nodo(Tipo.ACCESOARRAY, (String)v, contador++,v1left,v1right, v1);
                                                    ArrayList<Nodo> LNodos = new ArrayList<>();
                                                    LNodos.add(v2);
                                                    LNodos.add(naux1);
                                                    RESULT = new Nodo(Tipo.ASIGNACION, null, contador++,vleft,vright, LNodos);
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigFor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AsigFor ::= id Increment 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Nodo naux1 = new Nodo(Tipo.ID, (String)v, contador++,vleft,vright, EmptyNodes);
                        Nodo naux2 = new Nodo(Tipo.INT, "1", contador++, EmptyNodes);
                        ArrayList<Nodo> LNodos2 = new ArrayList<>();
                        LNodos2.add(naux1);
                        LNodos2.add(naux2);
                        Nodo naux3 = new Nodo(Tipo.SUM, null, contador++, LNodos2);
                        ArrayList<Nodo> LNodos = new ArrayList<>();
                        LNodos.add(naux1);
                        LNodos.add(naux3);
                        RESULT = new Nodo(Tipo.ASIGNACION, null, contador++,vleft,vright, LNodos);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigFor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AsigFor ::= id Acceso_array Increment 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> v1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                        Nodo naux1 = new Nodo(Tipo.ACCESOARRAY, (String)v, contador++,v1left,v1right, v1);
                                        Nodo naux2 = new Nodo(Tipo.INT, "1", contador++, EmptyNodes);
                                        ArrayList<Nodo> LNodos2 = new ArrayList<>();
                                        LNodos2.add(naux1);
                                        LNodos2.add(naux2);
                                        Nodo naux3 = new Nodo(Tipo.SUM, null, contador++, LNodos2);
                                        ArrayList<Nodo> LNodos = new ArrayList<>();
                                        LNodos.add(naux1);
                                        LNodos.add(naux3);
                                        RESULT = new Nodo(Tipo.ASIGNACION, null, contador++,vleft,vright, LNodos);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigFor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AsigFor ::= id Decrement 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        Nodo naux1 = new Nodo(Tipo.ID, (String)v, contador++,vleft,vright, EmptyNodes);
                        Nodo naux2 = new Nodo(Tipo.INT, "1", contador++, EmptyNodes);
                        ArrayList<Nodo> LNodos2 = new ArrayList<>();
                        LNodos2.add(naux2);
                        LNodos2.add(naux1);
                        Nodo naux3 = new Nodo(Tipo.RES, null, contador++, LNodos2);
                        ArrayList<Nodo> LNodos = new ArrayList<>();
                        LNodos.add(naux1);
                        LNodos.add(naux3);
                        RESULT = new Nodo(Tipo.ASIGNACION, null, contador++,vleft,vright, LNodos);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigFor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AsigFor ::= id Acceso_array Decrement 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> v1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                        Nodo naux1 = new Nodo(Tipo.ACCESOARRAY, (String)v, contador++,v1left,v1right, v1);
                                        Nodo naux2 = new Nodo(Tipo.INT, "1", contador++, EmptyNodes);
                                        ArrayList<Nodo> LNodos2 = new ArrayList<>();
                                        LNodos2.add(naux2);
                                        LNodos2.add(naux1);
                                        Nodo naux3 = new Nodo(Tipo.RES, null, contador++, LNodos2);
                                        ArrayList<Nodo> LNodos = new ArrayList<>();
                                        LNodos.add(naux1);
                                        LNodos.add(naux3);
                                        RESULT = new Nodo(Tipo.ASIGNACION, null, contador++,vleft,vright, LNodos);
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigFor",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AsigFor2 ::= E 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = v;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigFor2",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AsigFor2 ::= condicion 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                        RESULT = v;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AsigFor2",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // WHILE ::= While Parentesis_a condiciones Parentesis_c Llave_a Sentencias Llave_c 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> v1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                            ArrayList<Nodo> LNodos = new ArrayList<>();
                                                                                            LNodos.add(v);
                                                                                            Nodo naux = null;
                                                                                            if(v1 == null){
                                                                                                naux = new Nodo(Tipo.SENTENCIAS, null, contador++,v1left,v1right, EmptyNodes);
                                                                                            }else{
                                                                                                naux = new Nodo(Tipo.SENTENCIAS, null, contador++,v1left,v1right, v1);
                                                                                            }                                                            
                                                                                            LNodos.add(naux);
                                                                                            RESULT = new Nodo(Tipo.WHILE, null, contador++,vleft,vright, LNodos);
                                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF ::= If Parentesis_a condiciones Parentesis_c IfOpc ElseOpc 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                            ArrayList<Nodo> LNodos = new ArrayList<>();
                                                                            LNodos.add(v);
                                                                            LNodos.add(v1);
                                                                            if(v2 != null){
                                                                                LNodos.add(v2);
                                                                            }
                                                                            RESULT = new Nodo(Tipo.IF, null, contador++,vleft,vright, LNodos);
                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IfOpc ::= Llave_a Sentencias Llave_c 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                            if(v != null) {
                                                RESULT = new Nodo(Tipo.IFOPC, null, contador++,vleft,vright, v);
                                            } else {
                                                RESULT = new Nodo(Tipo.IFOPC, null, contador++,vleft,vright, EmptyNodes);
                                            }
                                            
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfOpc",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ElseOpc ::= Else Llave_a Sentencias Llave_c 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                    if(v == null){
                                                        RESULT = new Nodo(Tipo.ELSE, null, contador++,vleft,vright, EmptyNodes);
                                                    }else{
                                                        RESULT = new Nodo(Tipo.ELSE, null, contador++,vleft,vright, v);
                                                    }
                                                    
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseOpc",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ElseOpc ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ElseOpc",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SWITCH ::= Switch Parentesis_a id Parentesis_c Llave_a Cases Llave_c 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> v1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                RESULT = new Nodo(Tipo.SWITCH, (String)v, contador++,vleft,vright, v1);
                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Cases ::= Cases Cases1 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                if(v == null){
                                    v = new ArrayList<>();
                                }
                                v.add(v1);
                                RESULT = v;
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cases",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Cases ::= Cases1 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    if(RESULT == null){
                        RESULT = new ArrayList<>();
                    }
                    RESULT.add(v);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cases",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Cases1 ::= Case F Dos_puntos Sentencias Break P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Nodo> v1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                                                if(v1==null){
                                                                    RESULT = new Nodo(Tipo.CASE, v.valor(), contador++,vleft,vright, EmptyNodes);
                                                                }else{
                                                                    RESULT = new Nodo(Tipo.CASE, v.valor(), contador++,vleft,vright, v1);
                                                                }
                                                                
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cases1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Cases1 ::= Default Dos_puntos Sentencias 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        if(v == null){
                                            RESULT = new Nodo(Tipo.CASE, null, contador++,vleft,vright, EmptyNodes);
                                        }else{
                                            RESULT = new Nodo(Tipo.CASE, null, contador++,vleft,vright, v);
                                        }
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Cases1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condiciones ::= condiciones OpLog condiciones1 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                ArrayList<Nodo> LNodos = new ArrayList<>();
                                                LNodos.add(v);
                                                LNodos.add(v1);
                                                RESULT = new Nodo(Tipo.OPLOG, (String)v2, contador++,v2left,v2right, LNodos);
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condiciones ::= Parentesis_a condiciones OpLog condiciones1 Parentesis_c 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                ArrayList<Nodo> LNodos = new ArrayList<>();
                                                LNodos.add(v);
                                                LNodos.add(v1);
                                                RESULT = new Nodo(Tipo.OPLOG, (String)v2, contador++,v2left,v2right, LNodos);
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // condiciones ::= condiciones1 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // condiciones1 ::= condicion 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // condiciones1 ::= Parentesis_a condicion Parentesis_c 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condiciones1",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // condicion ::= E OpRel E 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                    ArrayList<Nodo> LNodos = new ArrayList<>();
                                    LNodos.add(v);
                                    LNodos.add(v1);
                                    RESULT = new Nodo(Tipo.OPREL, (String)v2, contador++,v2left,v2right, LNodos);  
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // condicion ::= E Equal TF 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            ArrayList<Nodo> LNodos = new ArrayList<>();
                            LNodos.add(v);
                            LNodos.add(v1);
                            RESULT = new Nodo(Tipo.OPREL, "==", contador++,v1left,v1right, LNodos);    
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // condicion ::= E Not_equal TF 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            ArrayList<Nodo> LNodos = new ArrayList<>();
                            LNodos.add(v);
                            LNodos.add(v1);
                            RESULT = new Nodo(Tipo.OPREL, "!=", contador++,v1left,v1right, LNodos);    
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // condicion ::= TF 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // condicion ::= Llamada_sub Equal TF 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                    ArrayList<Nodo> LNodos = new ArrayList<>();
                                    LNodos.add(v);
                                    LNodos.add(v1);
                                    RESULT = new Nodo(Tipo.OPREL, "==", contador++,v1left,v1right, LNodos);    
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // condicion ::= Llamada_sub Not_equal TF 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                                        ArrayList<Nodo> LNodos = new ArrayList<>();
                                        LNodos.add(v);
                                        LNodos.add(v1);
                                        RESULT = new Nodo(Tipo.OPREL, "!=", contador++,v1left,v1right, LNodos);    
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // TF ::= True 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Tipo.BOOL, "True", contador++, EmptyNodes); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TF",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TF ::= False 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(Tipo.BOOL, "False", contador++, EmptyNodes); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TF",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OpLog ::= And 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpLog",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OpLog ::= Or 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpLog",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OpRel ::= Equal 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpRel",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OpRel ::= Not_equal 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpRel",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OpRel ::= Mayor 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpRel",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OpRel ::= Menor 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpRel",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OpRel ::= Mayor_equal 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpRel",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OpRel ::= Menor_equal 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OpRel",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Programs ::= Programs Program 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programs",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Programs ::= Program 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programs",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Program ::= Main_program 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = v; 
                                initnodo.addSon(v); 
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Program ::= Subprograma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = v; 
                                initnodo.addSon(v); 
                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Subprograma ::= Function Tipo id Parentesis_a Lista_Param Parentesis_c Llave_a Sentencias END Llave_c 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<Nodo> v2 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int v3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int v3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Nodo> v3 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v4 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                                                    
                                                                                                                    Nodo naux2 = new Nodo(Tipo.ID, (String)v1, contador++,v1left,v1right, EmptyNodes);
                                                                                                                    Nodo naux3 = new Nodo(Tipo.LISTAPARAMS, null, contador++,v2left,v2right, v2);
                                                                                                                    Nodo naux4 = null;
                                                                                                                    if(v3 == null){
                                                                                                                        naux4 = new Nodo(Tipo.SENTENCIAS, null, contador++,v3left,v3right, EmptyNodes);
                                                                                                                    }else{
                                                                                                                        naux4 = new Nodo(Tipo.SENTENCIAS, null, contador++,v3left,v3right, v3);
                                                                                                                    }
                                                                                                                    naux4.addSon(v4);
                                                                                                                    ArrayList<Nodo> LNodos = new ArrayList<>();
                                                                                                                    LNodos.add(v);
                                                                                                                    LNodos.add(naux2);
                                                                                                                    LNodos.add(naux3);
                                                                                                                    LNodos.add(naux4);
                                                                                                                    RESULT = new Nodo(Tipo.FUNCION, null, contador++,vleft,vright, LNodos);
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Subprograma",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Subprograma ::= Procedure id Parentesis_a Lista_Param Parentesis_c Llave_a Sentencias Llave_c 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Nodo> v1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Nodo> v2 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                                                                                                Nodo naux1 = new Nodo(Tipo.ID, (String)v, contador++,vleft,vright, EmptyNodes);
                                                                                                Nodo naux2 = new Nodo(Tipo.LISTAPARAMS, null, contador++,v1left,v1right, v1);
                                                                                                Nodo naux3 = null;
                                                                                                if(v2 == null){
                                                                                                    naux3 = new Nodo(Tipo.SENTENCIAS, null, contador++,v2left,v2right, EmptyNodes);
                                                                                                }else{
                                                                                                    naux3 = new Nodo(Tipo.SENTENCIAS, null, contador++,v2left,v2right, v2);
                                                                                                }   
                                                                                               
                                                                                                ArrayList<Nodo> LNodos = new ArrayList<>();
                                                                                                LNodos.add(naux1);
                                                                                                LNodos.add(naux2);
                                                                                                LNodos.add(naux3);
                                                                                                RESULT = new Nodo(Tipo.PROCEDURE, null, contador++,vleft,vright, LNodos);
                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Subprograma",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RETURN ::= Return condiciones P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                                            ArrayList<Nodo> LNodos = new ArrayList<>();
                                            LNodos.add(v);
                                            RESULT = new Nodo(Tipo.RETURN, null, contador++,vleft,vright, LNodos);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RETURN ::= Return E P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                                            ArrayList<Nodo> LNodos = new ArrayList<>();
                                            LNodos.add(v);
                                            RESULT = new Nodo(Tipo.RETURN, null, contador++,vleft,vright, LNodos);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // END ::= End condiciones P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                                            ArrayList<Nodo> LNodos = new ArrayList<>();
                                            LNodos.add(v);
                                            RESULT = new Nodo(Tipo.RETURN, null, contador++,vleft,vright, LNodos);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("END",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // END ::= End E P_coma 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
                                            ArrayList<Nodo> LNodos = new ArrayList<>();
                                            LNodos.add(v);
                                            RESULT = new Nodo(Tipo.RETURN, null, contador++,vleft,vright, LNodos);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("END",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Lista_Param ::= Param 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            if(RESULT == null){
                                RESULT = new ArrayList<>();
                            }
                            RESULT.add(v);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Param",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Lista_Param ::= Lista_Param Coma Param 
            {
              ArrayList<Nodo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Nodo> v = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        if(v == null) {
                                            v = new ArrayList<>();
                                        }
                                        v.add(v1);
                                        RESULT = v;
                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Param",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Lista_Param ::= 
            {
              ArrayList<Nodo> RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Lista_Param",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Param ::= Tipo id 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            Nodo naux2 = new Nodo(Tipo.ID, (String)v1, contador++,v1left,v1right, EmptyNodes);
                            ArrayList<Nodo> LNodos = new ArrayList<>();
                            LNodos.add(v);
                            LNodos.add(naux2);
                            RESULT = new Nodo(Tipo.PARAM, null, contador++,v1left,v1right, LNodos);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Param",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // E ::= T Ep 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        ArrayList<Nodo> LNodos = new ArrayList<>();
                        if(v1 != null){ 
                            v1.addSon(v);
                            RESULT = v1;
                        }else{
                            RESULT = v;
                        }      
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Ep ::= Suma T Ep 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                            ArrayList<Nodo> LNodos = new ArrayList<>();
                            RESULT = new Nodo(Tipo.SUM, null, contador++, LNodos);
                            if(v1 != null){
                                RESULT.addSon(v1);
                                v1.addSon(v);
                            }else{
                                RESULT.addSon(v);
                            }      
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ep",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Ep ::= Resta T Ep 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                            ArrayList<Nodo> LNodos = new ArrayList<>();
                            RESULT = new Nodo(Tipo.RES, null, contador++, LNodos);
                            if(v1 != null){
                                RESULT.addSon(v1);
                                v1.addSon(v);
                            }else{
                                RESULT.addSon(v);
                            }         
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ep",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Ep ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Ep",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // T ::= F Tp 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                            ArrayList<Nodo> LNodos = new ArrayList<>();
                            if(v1 != null){ 
                                v1.addSon(v);
                                RESULT = v1;
                            }else{
                                RESULT = v;
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Tp ::= Mult F Tp 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                            ArrayList<Nodo> LNodos = new ArrayList<>();
                            RESULT = new Nodo(Tipo.MULT, null, contador++, LNodos);
                            if(v1 != null){
                                RESULT.addSon(v1);
                                v1.addSon(v);
                            }else{
                                RESULT.addSon(v);
                            }       
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tp",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Tp ::= Div F Tp 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Nodo v1 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                            ArrayList<Nodo> LNodos = new ArrayList<>();
                            RESULT = new Nodo(Tipo.DIV, null, contador++, LNodos);
                            if(v1 != null){
                                RESULT.addSon(v1);
                                v1.addSon(v);
                            }else{
                                RESULT.addSon(v);
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tp",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Tp ::= 
            {
              Nodo RESULT =null;
		 RESULT = new Nodo(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Tp",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // F ::= Parentesis_a E Parentesis_c 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = v; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // F ::= Entero 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo(Tipo.INT, v.toString(), contador++,vleft,vright, EmptyNodes); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // F ::= Cadena 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo(Tipo.STRING, (String)v, contador++,vleft,vright, EmptyNodes); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // F ::= id 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo(Tipo.ID, (String)v, contador++,vleft,vright, EmptyNodes); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // F ::= id Acceso_array 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Nodo> v1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo(Tipo.ACCESOARRAY, (String)v, contador++,v1left,v1right, v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // F ::= Resta id 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo(Tipo.ID, "-"+(String)v, contador++,vleft,vright, EmptyNodes); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // F ::= Resta id Acceso_array 
            {
              Nodo RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Nodo> v1 = (ArrayList<Nodo>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nodo(Tipo.ACCESOARRAY, "-" + (String)v, contador++,v1left,v1right, v1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
